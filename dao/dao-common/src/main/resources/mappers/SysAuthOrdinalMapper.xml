<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.osyangxin.dao.mapper.SysAuthOrdinalMapper" >
  <resultMap id="BaseResultMap" type="com.osyangxin.dao.model.SysAuthOrdinal" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="ordinal" property="ordinal" jdbcType="INTEGER" />
    <result column="auth_id" property="authId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="deleted" property="deleted" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, ordinal, auth_id, level, created_at, updated_at, deleted
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from sys_auth_ordinal
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_auth_ordinal
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.osyangxin.dao.model.SysAuthOrdinal" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_auth_ordinal (ordinal, auth_id, level,
      created_at, updated_at, deleted
      )
    values (#{ordinal,jdbcType=INTEGER}, #{authId,jdbcType=INTEGER}, #{level,jdbcType=INTEGER},
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{deleted,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.osyangxin.dao.model.SysAuthOrdinal" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_auth_ordinal
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ordinal != null" >
        ordinal,
      </if>
      <if test="authId != null" >
        auth_id,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ordinal != null" >
        #{ordinal,jdbcType=INTEGER},
      </if>
      <if test="authId != null" >
        #{authId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.osyangxin.dao.model.SysAuthOrdinal" >
    update sys_auth_ordinal
    <set >
      <if test="ordinal != null" >
        ordinal = #{ordinal,jdbcType=INTEGER},
      </if>
      <if test="authId != null" >
        auth_id = #{authId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.osyangxin.dao.model.SysAuthOrdinal" >
    update sys_auth_ordinal
    set ordinal = #{ordinal,jdbcType=INTEGER},
      auth_id = #{authId,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getByConditions" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from sys_auth_ordinal
    <where>
      <choose>
        <when test="conditions!= null">
          <foreach close="" collection="conditions" index="key" item="value" open="" separator="AND">
            ${key}=#{value}
          </foreach>
        </when>
      </choose>
    </where>
  </select>
  <select id="getByConditionList" resultMap="BaseResultMap" parameterType="list">
    select
    <include refid="Base_Column_List"/>
    from sys_auth_ordinal
    <where>
      <choose>
        <when test="conditions != null and conditions.size() > 0">
          <foreach item="item" collection="conditions"
                   open="" separator="AND" close="">
            <choose>
              <when test="item.opt == 'locate'">
                locate(#{item.value}, ${item.key}) > 0
              </when>
              <when test="item.opt == 'in'">
                ${item.key} in
                <foreach item="itemIn" collection="item.value" open="(" separator="," close=")">
                  #{itemIn}
                </foreach>
              </when>
              <otherwise>
                ${item.key} ${item.opt} #{item.value}
              </otherwise>
            </choose>
          </foreach>
        </when>
      </choose>
    </where>
  </select>
  <select id="getSortedResultByConditionList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from sys_auth_ordinal
    <where>
      <choose>
        <when test="conditions != null and conditions.size() > 0">
          <foreach item="item" collection="conditions"
                   open="" separator="AND" close="">
            <choose>
              <when test="item.opt != 'in'">
                ${item.key} ${item.opt} #{item.value}
              </when>
              <otherwise>
                ${item.key} ${item.opt} ${item.value}
              </otherwise>
            </choose>
          </foreach>
        </when>
      </choose>
    </where>
    <choose>
      <when test="sorter !=null">
        order by ${sorter.field} ${sorter.sortType}
      </when>
    </choose>
  </select>
  <select id="getByIn" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    from sys_auth_ordinal
    <where>
      <choose>
        <when test="field != null">
          ${field} in
          <foreach item="item" index="index" collection="set" open="(" separator="," close=")">
            #{item}
          </foreach>
        </when>
      </choose>
    </where>
  </select>

  <update id="updateOrdinalForAdd">
          update sys_auth_ordinal
          set ordinal= ordinal + 1, updated_at = #{updatedAt}
          where id >= ( SELECT t.id FROM (select id from sys_auth_ordinal where ordinal = #{ordinal} and auth_id != #{id}) t ) and auth_id != #{id}
  </update>

  <update id="updateOrdinalForSub">
    update sys_auth_ordinal
    set ordinal = ordinal - #{size}, updated_at = #{updatedAt}
    where ordinal > #{minOrdinalForDelIds}
  </update>

  <delete id="delAllAuthOrdinal">
    delete from sys_auth_ordinal
  </delete>

  <insert id="insertAuthOrdinal" useGeneratedKeys="true" keyProperty="id">
    insert into sys_auth_ordinal (id, ordinal, auth_id, level, created_at, updated_at)
    values
    <foreach item="item" collection="list" separator=",">
      (#{item.id}, #{item.ordinal}, #{item.authId}, #{item.level}, #{now}, #{now} )
    </foreach>
  </insert>
  <select id="getMaxOrdinalValue" resultType="java.lang.Integer">
    SELECT max(ordinal) FROM `sys_auth_ordinal`
  </select>

  <select id="getByAuthId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List" />
    from sys_auth_ordinal
    where auth_id = #{authId,jdbcType=INTEGER}
  </select>

  <update id="updateOrdinalAddOne" parameterType="java.lang.String">
    update sys_auth_ordinal
    set ordinal = ordinal+1
    where auth_id in ${join2SqlInStr}
  </update>
</mapper>