<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.osyangxin.dao.mapper.SysUserMapper">
    <resultMap id="BaseResultMap" type="com.osyangxin.dao.model.SysUser">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="status" jdbcType="SMALLINT" property="status" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="phone_num" jdbcType="VARCHAR" property="phoneNum" />
        <result column="last_reset_password_time" jdbcType="TIMESTAMP" property="lastResetPasswordTime" />
        <result column="last_visit_time" jdbcType="TIMESTAMP" property="lastVisitTime" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
        <result column="deleted" jdbcType="TINYINT" property="deleted" />
        <result column="get_msg_at" jdbcType="TIMESTAMP" property="getMsgAt" />
        <result column="booking_order_get_msg_at" jdbcType="TIMESTAMP" property="bookingOrderGetMsgAt" />
    </resultMap>
    <sql id="Base_Column_List">
    id, name, status, password, phone_num, last_reset_password_time, last_visit_time,
    created_at, updated_at, deleted, get_msg_at, booking_order_get_msg_at
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from sys_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sys_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.osyangxin.dao.model.SysUser">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into sys_user (name, status, password,
        phone_num, last_reset_password_time, last_visit_time,
        created_at, updated_at, deleted,
        get_msg_at, booking_order_get_msg_at)
        values (#{name,jdbcType=VARCHAR}, #{status,jdbcType=SMALLINT}, #{password,jdbcType=VARCHAR},
        #{phoneNum,jdbcType=VARCHAR}, #{lastResetPasswordTime,jdbcType=TIMESTAMP}, #{lastVisitTime,jdbcType=TIMESTAMP},
        #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{deleted,jdbcType=TINYINT},
        #{getMsgAt,jdbcType=TIMESTAMP}, #{bookingOrderGetMsgAt,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.osyangxin.dao.model.SysUser">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into sys_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                name,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="phoneNum != null">
                phone_num,
            </if>
            <if test="lastResetPasswordTime != null">
                last_reset_password_time,
            </if>
            <if test="lastVisitTime != null">
                last_visit_time,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
            <if test="getMsgAt != null">
                get_msg_at,
            </if>
            <if test="bookingOrderGetMsgAt != null">
                booking_order_get_msg_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=SMALLINT},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="phoneNum != null">
                #{phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="lastResetPasswordTime != null">
                #{lastResetPasswordTime,jdbcType=TIMESTAMP},
            </if>
            <if test="lastVisitTime != null">
                #{lastVisitTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                #{deleted,jdbcType=TINYINT},
            </if>
            <if test="getMsgAt != null">
                #{getMsgAt,jdbcType=TIMESTAMP},
            </if>
            <if test="bookingOrderGetMsgAt != null">
                #{bookingOrderGetMsgAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.osyangxin.dao.model.SysUser">
        update sys_user
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=SMALLINT},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="phoneNum != null">
                phone_num = #{phoneNum,jdbcType=VARCHAR},
            </if>
            <if test="lastResetPasswordTime != null">
                last_reset_password_time = #{lastResetPasswordTime,jdbcType=TIMESTAMP},
            </if>
            <if test="lastVisitTime != null">
                last_visit_time = #{lastVisitTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                deleted = #{deleted,jdbcType=TINYINT},
            </if>
            <if test="getMsgAt != null">
                get_msg_at = #{getMsgAt,jdbcType=TIMESTAMP},
            </if>
            <if test="bookingOrderGetMsgAt != null">
                booking_order_get_msg_at = #{bookingOrderGetMsgAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.osyangxin.dao.model.SysUser">
    update sys_user
    set name = #{name,jdbcType=VARCHAR},
      status = #{status,jdbcType=SMALLINT},
      password = #{password,jdbcType=VARCHAR},
      phone_num = #{phoneNum,jdbcType=VARCHAR},
      last_reset_password_time = #{lastResetPasswordTime,jdbcType=TIMESTAMP},
      last_visit_time = #{lastVisitTime,jdbcType=TIMESTAMP},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=TINYINT},
      get_msg_at = #{getMsgAt,jdbcType=TIMESTAMP},
      booking_order_get_msg_at = #{bookingOrderGetMsgAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="getByConditions" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_user
        <where>
            <choose>
                <when test="conditions!= null">
                    <foreach close="" collection="conditions" index="key" item="value" open="" separator="AND">
                        ${key}=#{value}
                    </foreach>
                </when>
            </choose>
        </where>
    </select>
    <select id="getByConditionList" resultMap="BaseResultMap" parameterType="list">
        select
        <include refid="Base_Column_List"/>
        from sys_user
        <where>
            <choose>
                <when test="conditions != null and conditions.size() > 0">
                    <foreach item="item" collection="conditions"
                             open="" separator="AND" close="">
                        <choose>
                            <when test="item.opt == 'locate'">
                                locate(#{item.value}, ${item.key}) > 0
                            </when>
                            <when test="item.opt == 'in'">
                                ${item.key} in
                                <foreach item="itemIn" collection="item.value" open="(" separator="," close=")">
                                    #{itemIn}
                                </foreach>
                            </when>
                            <otherwise>
                                ${item.key} ${item.opt} #{item.value}
                            </otherwise>
                        </choose>
                    </foreach>
                </when>
            </choose>
        </where>
    </select>
    <select id="getSortedResultByConditionList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_user
        <where>
            <choose>
                <when test="conditions != null and conditions.size() > 0">
                    <foreach item="item" collection="conditions"
                             open="" separator="AND" close="">
                        <choose>
                            <when test="item.opt == 'locate'">
                                locate(#{item.value}, ${item.key}) > 0
                            </when>
                            <when test="item.opt == 'in'">
                                ${item.key} in
                                <foreach item="itemIn" collection="item.value" open="(" separator="," close=")">
                                    #{itemIn}
                                </foreach>
                            </when>
                            <otherwise>
                                ${item.key} ${item.opt} #{item.value}
                            </otherwise>
                        </choose>
                    </foreach>
                </when>
            </choose>
        </where>
        <choose>
            <when test="sorter !=null">
                order by ${sorter.field} ${sorter.sortType}
            </when>
        </choose>
    </select>
    <select id="getByIn" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        from sys_user
        <where>
            <choose>
                <when test="field != null">
                    ${field} in
                    <foreach item="item" index="index" collection="set" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </when>
            </choose>
        </where>
    </select>

    <select id="getSysUserViewByConditionList" resultType="com.osyangxin.dao.model.SysUserInfoView"
            parameterType="list">
        select
        user.id,user.name,user.phone_num,
        role.id as roleId,role.name as roleName,
        user.status,user.created_at,user.updated_at
        from sys_user user
        left join sys_user_role urole on user.id=urole.user_id
        left join sys_role role on urole.role_id = role.id
        <where>
            <if test="conditions != null and conditions.size() > 0">
                <foreach item="item" collection="conditions"
                         open="" separator="AND" close="">
                    <choose>
                        <when test="item.opt == 'locate'">
                            locate(#{item.value}, ${item.key}) > 0
                        </when>
                        <when test="item.opt == 'in'">
                            ${item.key} in
                            <foreach item="itemIn" collection="item.value" open="(" separator="," close=")">
                                #{itemIn}
                            </foreach>
                        </when>
                        <otherwise>
                            ${item.key} ${item.opt} #{item.value}
                        </otherwise>
                    </choose>
                </foreach>
            </if>
        </where>
    </select>

    <select id="getRoleStatusByUserId" resultType="com.osyangxin.dao.model.SysRole">
        select r.status
        from sys_role r
                 left join sys_user_role  ur on ur.role_id = r.id
        where r.deleted = 0 and ur.user_id = #{id}
    </select>

    <update id="batchUpdateByUserId">
        update sys_user
        set `status`= #{status}, updated_at = #{updatedAt}
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
</mapper>